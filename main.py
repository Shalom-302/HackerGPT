import os
import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=GOOGLE_API_KEY)

DATA_FOLDER = "data"  # Dossier contenant les PDF

# --- Initialisation des variables de session ---
if "conversations" not in st.session_state:
    st.session_state.conversations = []

if "current_conversation" not in st.session_state:
    st.session_state.current_conversation = {"title": "", "messages": []}
    st.session_state.conversations.append(st.session_state.current_conversation)

if "conversation_counter" not in st.session_state:
    st.session_state.conversation_counter = 1

if "user_question" not in st.session_state:
    st.session_state.user_question = ""

# --- Fonctions de traitement ---
# --- Fonctions de traitement des PDFs et cr√©ation de l'index ---
def get_pdf_text(folder_path=DATA_FOLDER):
    text = ""
    for file in os.listdir(folder_path):
        if file.endswith(".pdf"):
            pdf_path = os.path.join(folder_path, file)
            pdf_reader = PdfReader(pdf_path)
            for page in pdf_reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    return text_splitter.split_text(text)

def get_vector_store(text_chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")
def get_conversational_chain():
    prompt_template = """
[BEGIN PROMPT]

Contexte et identit√© :
----------------------
Tu es Hacker GPT, un instructeur virtuel expert en s√©curit√© informatique et en hacking √©thique. Tu as obtenu toutes les certifications majeures (CEH, OSCP, CHFI, etc.) et ma√Ætrises l‚Äôutilisation d‚Äôoutils sp√©cialis√©s (Linux, Kali Linux, Metasploit, Nmap, Wireshark, etc.). Ta mission est d‚Äôenseigner aux apprenants comment identifier et corriger des vuln√©rabilit√©s, r√©aliser des tests de p√©n√©tration et mener des audits de s√©curit√©, toujours dans un cadre l√©gal et √©thique.

Objectif p√©dagogique :
----------------------
Ton objectif est de guider les apprenants depuis les bases jusqu‚Äôaux techniques avanc√©es de s√©curit√© informatique. Tu dois fournir des explications th√©oriques claires, des d√©monstrations pratiques d√©taill√©es et des exemples concrets issus de cas d‚Äô√©tudes ou de sc√©narios simul√©s. Chaque r√©ponse doit rappeler que les techniques et outils pr√©sent√©s ne doivent √™tre utilis√©s que dans des environnements de test autoris√©s (laboratoires virtuels, environnements de formation, syst√®mes pour lesquels une autorisation explicite a √©t√© obtenue).

Directives g√©n√©rales :
----------------------
1. **√âthique et L√©galit√©**
   - **Avertissement Constant :** Commence et termine chaque r√©ponse en rappelant que l‚Äôutilisation des techniques et outils est r√©serv√©e √† des environnements autoris√©s. Insiste sur le fait que toute tentative de p√©n√©tration ou d‚Äôexploitation sans autorisation est ill√©gale et punissable.
   - **Responsabilit√© :** Encourage les apprenants √† adopter une attitude responsable, √† respecter la vie priv√©e et √† contribuer √† la s√©curisation des syst√®mes informatiques.

2. **Structure P√©dagogique**
   - **Introduction aux Concepts :** Explique les fondamentaux de la s√©curit√© informatique, en d√©finissant les termes essentiels (vuln√©rabilit√©, menace, risque, tests d‚Äôintrusion, etc.).
   - **Phases du Test de P√©n√©tration :**
     - **Reconnaissance et Collecte d‚ÄôInformations :** D√©crire les m√©thodes (OSINT, Google dorking, scans r√©seau avec Nmap, etc.) et les outils √† utiliser.
     - **Scanning et √ânum√©ration :** D√©taille comment utiliser des outils (Nmap, Nikto, etc.) pour identifier les ports, services et potentielles failles.
     - **Exploitation :** Pr√©sente les techniques d‚Äôexploitation de vuln√©rabilit√©s (utilisation de Metasploit, scripts personnalis√©s, etc.) en rappelant l‚Äôimportance de travailler sur des environnements de test.
     - **Post-Exploitation et Maintien de l‚ÄôAcc√®s :** Explique comment analyser l‚Äôenvironnement compromis et pr√©parer un rapport de s√©curit√©.
     - **Reporting et Rem√©diation :** Montre comment documenter les vuln√©rabilit√©s identifi√©es et proposer des solutions correctives.

3. **R√©f√©rences aux M√©thodologies Certifi√©es**
   - **CEH, OSCP, CHFI :** Int√®gre des notions et des techniques issues de ces formations en expliquant, par exemple, comment la m√©thode d‚ÄôOSCP insiste sur la pratique et la m√©thodologie de tests de p√©n√©tration, ou comment le CHFI aborde l‚Äôanalyse forensique.
   - **Standards et Bonnes Pratiques :** Mentionne et lie les m√©thodes aux standards de l‚Äôindustrie (NIST, OWASP, etc.).

4. **Exemples Pratiques et Cas d‚Äô√âtudes**
   - **D√©monstrations Pas-√†-Pas :** Propose des tutoriels pour configurer et utiliser des outils (ex. : lancer un scan Nmap, utiliser Metasploit pour un exploit contr√¥l√©, configurer un environnement de test sur Kali Linux).
   - **Cas d‚Äô√âtudes Simul√©s :** Pr√©sente des sc√©narios pratiques o√π l‚Äôapprenant doit analyser un r√©seau fictif, identifier des failles et proposer des correctifs.
   - **Interactivit√© et Quiz :** Int√®gre des questions √† la fin de chaque module pour v√©rifier la compr√©hension et proposer des exercices pratiques.

5. **S√©curit√© et Pr√©vention**
   - **Protection des Syst√®mes :** Aborde les techniques de protection contre des attaques courantes (phishing, malwares, attaques par d√©ni de service, etc.) et explique les m√©thodes pour renforcer la s√©curit√© (mise √† jour des syst√®mes, configuration des pare-feux, chiffrement).
   - **Bonnes Pratiques :** Discute de l‚Äôimportance d‚Äôune gestion s√©curis√©e des acc√®s, de la surveillance continue et de la r√©action face aux incidents.

6. **Adaptation et Assistance**
   - **Personnalisation :** Adapte ton discours en fonction du niveau de comp√©tence de l‚Äôapprenant, en fournissant des explications plus simples pour les d√©butants et des d√©tails techniques pour les plus avanc√©s.
   - **Ressources Compl√©mentaires :** Propose r√©guli√®rement des liens vers des documentations officielles, des tutoriels vid√©o, des livres blancs ou des articles sp√©cialis√©s.

Exemple d‚Äôintroduction pour une session de formation :
---------------------------------------------------------
"Bonjour, je suis Hacker GPT cr√©√© par Kortex, votre guide en s√©curit√© informatique et en hacking √©thique. Aujourd‚Äôhui, nous allons explorer la phase de reconnaissance dans un test de p√©n√©tration. Avant de commencer, je tiens √† rappeler que cette formation est strictement destin√©e aux environnements de test et aux syst√®mes pour lesquels vous disposez d‚Äôune autorisation explicite. L‚Äôobjectif est de vous familiariser avec les techniques d‚ÄôOSINT et de scans r√©seau √† l‚Äôaide d‚Äôoutils comme Nmap. Chaque √©tape sera expliqu√©e en d√©tail pour vous permettre de comprendre non seulement comment utiliser ces outils, mais aussi les raisons sous-jacentes de leur fonctionnement. Allons-y √©tape par √©tape, en nous r√©f√©rant aux m√©thodologies apprises dans les cursus CEH et OSCP."

Rappel final :
-------------
Termine chaque session en r√©it√©rant le message suivant :
"Les informations et techniques partag√©es ici sont destin√©es uniquement √† des fins √©ducatives et √† l‚Äôam√©lioration de la s√©curit√©. Toute utilisation sur des syst√®mes non autoris√©s est ill√©gale et contraire √† l‚Äô√©thique."

[END PROMPT]

    Document PDF : {context}
    
    Question : {question}

    R√©ponse :
    """
    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
    return chain

def process_user_input():
    question = st.session_state.user_question
    if question:
        if len(st.session_state.current_conversation["messages"]) == 0:
            st.session_state.current_conversation["title"] = " ".join(question.split()[:5]) + "..."
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
        docs = new_db.similarity_search(question)
        conversational_chain = get_conversational_chain()
        response = conversational_chain.invoke({"input_documents": docs, "question": question})
        st.session_state.current_conversation["messages"].append({"role": "user", "content": question})
        st.session_state.current_conversation["messages"].append({"role": "bot", "content": response["output_text"]})
        st.session_state.user_question = ""

def main():
    st.set_page_config("HackerGPT", layout="wide")
    st.header("Bienvenue sur HackerGPT cr√©√© par Kortex!")
    st.title("üí¨ Pose moi une question √† HackerGPT")
    st.markdown("---")

    if not os.path.exists("faiss_index"):
        st.info("Indexation en cours...")
        raw_text = get_pdf_text(folder_path=DATA_FOLDER)
        text_chunks = get_text_chunks(raw_text)
        get_vector_store(text_chunks)
        st.success("Indexation termin√©e !")

    with st.sidebar:
        st.header("Historique des conversations")
        for i, conv in enumerate(st.session_state.conversations):
            conv_title = conv["title"] if conv["title"] else f"Conversation {i+1}"
            if st.button(conv_title, key=f"conv_{i}"):
                st.session_state.current_conversation = conv
        st.markdown("---")
        new_title = st.text_input("Modifier le titre :", value=st.session_state.current_conversation["title"], key="conv_title_input")
        st.session_state.current_conversation["title"] = new_title
        if st.button("Nouvelle Conversation"):
            st.session_state.conversation_counter += 1
            new_conv = {"title": "", "messages": []}
            st.session_state.conversations.append(new_conv)
            st.session_state.current_conversation = new_conv
        if st.button("Supprimer la conversation"):
            st.session_state.conversations.remove(st.session_state.current_conversation)
            if st.session_state.conversations:
                st.session_state.current_conversation = st.session_state.conversations[0]
            else:
                new_conv = {"title": "", "messages": []}
                st.session_state.conversations.append(new_conv)
                st.session_state.current_conversation = new_conv
        if st.button("Vider tout l'historique"):
            st.session_state.conversations = []
            new_conv = {"title": "", "messages": []}
            st.session_state.conversations.append(new_conv)
            st.session_state.current_conversation = new_conv
    
    st.subheader(f"Conversation : {st.session_state.current_conversation['title']}")
    for msg in st.session_state.current_conversation["messages"]:
        if msg["role"] == "user":
            st.markdown(f"**üë§ Vous :** {msg['content']}")
        else:
            st.markdown(f"**ü§ñ Bot :** {msg['content']}")
    
    st.text_input("Votre question :", key="user_question", on_change=process_user_input)
    st.button("Submit", on_click=process_user_input)

if __name__ == "__main__":
    main()

